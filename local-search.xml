<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>阿里一面</title>
    <link href="/2023/04/19/%E9%98%BF%E9%87%8C%E4%B8%80%E9%9D%A2/"/>
    <url>/2023/04/19/%E9%98%BF%E9%87%8C%E4%B8%80%E9%9D%A2/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="b6e899a29bfb7912b567a5fae56f5cc46331ae2eaf27a2b814399edadde461b0">961d921d36930044aa864c9e43aa78a86e41450cf7a2510b708213b54630ae8a9743b56a95c1a3288e17854e1afc24c5629d25674610d2ff64c7c07988fde8186abc3b53ed9f094a5bf3df47a5686d546821e5024c1298323de2e39fee69d91433d3973a0d14c4889f25878bd2d960a785c0523774734a880f59081b5b7d4ec914d20b7650eda8886fab5959caa85a61894a4ffca97e667ed13a85acef6597b0a54d7dbe819d21ba85dcec8257e79a7706e0f54fcf45f53523d6f977ff75ca71dccaf4573b4aa1357f4e9ed075b7a3e91f45c260fcd25ce1c0f78727f5e72704d4ac16f230548477e9db99244f6d10705c8b4b3f57e51e34834084be5533381ee77a0f05e0a51801def4da2d56c6c9b46320d6e68ee0b167253862bac3561b8456f1aa253abcdd3442f7475e3bdca6a0d2f6e7d3cc0e6cea7886b60c5d1d09efeecc514012bb42e33f4f45fc311bdd893abac5be2c78f8fca0e22b85321facc3e2d8b4ac0aa9e32d40a9bf86dc241309fb06f32ac11a8bc66f3d9db00e4eaf50f225dffb0ad5f13b89a5c7648bf8a28e0ec942a284fd34132e7c5382e0341ce625a6e04cf46d30430ec9a801355f8e242f91470d1c310e816136ae0b67267e63770bccce517742d68eedccae3199b3ea26bbfcb8e19b96ab428dfc39d4a1eea83a2219e245ec5577ca5acbd5d05ef34f02df1f4afc8b58072357f9551f7f56ca63dc1420da249c1f87782726f62b5b7b83b826d9bc8a5bd801c3711f3251a8f1d3f37dfb124368c38fd7ef92706c0c305debfa91957810f046359aacac31731772f5618c5fc9a59915c32ac3c24c5032c0feca7a56c4da1897aae300c40aa61b168023bd7c24df67ec23b082a56029c5566e86ba07b48ca73ef2ae932b577cae8628ff9dc2c055cc09a155eff04e2b17bea53221a11ef66f18c69f02ef6c7adf0a61ee2be78328cf2c48163c1169153e878bab953a52802cf2b6e7db442cbb3c3759ea662204d485e1ecbc03cc94005ae541e9880edceaca8d0b520032fa5c2242d442e3dfd10167a8c9a68c4101233db8074d32e3729a98ee4aac1cb4c762866f119bcdfa6f33700a140397ac821cc8cfdefbccc2eb310e18a8f58cc5748e06ad1bc11b3a7c7b50fc06c578c8420252cfb6ed02a3e4768a7df1164d9402c05dc7b24c63336dd0520a87912b54db0d081a03f6713ccf679393a56dc1a8342e46e42abb3428771b5df536e54de92e6beb8c074b684c1b6ac11d0088beac55cdfe4cf0b68de58b446fff79bbf8606b143b024cfb36c9594e2314e4080a5860978a88c2f0cdc49fb1091c7dd995053b9c5685b3b1fcb816a62776722cbfde179750c06cf38236e4300eb0dc47ac703339bc708d19c7f1ccb30ed66a022ad99871e7c6ef12acd96f0b6bc93cf35c81250b20a655e0aca8291e644c8e16f692c3b80b3726e6a7f92504e656895ddc07c455e9fa66fbf10003989cf9bdd01f7be6c127d9bea2b3ac9be523b49e6b3198d5cf2dff08703641ba1c0be66216db1133735844ee9f5702e84eb7cfcb8a293b3db0925b396d42c28978eba63e90a49dfee8788282de79b43d7bc945a5d16d60fe61df11ff5ee63c471d85e297d90049a6299676532baead08e71527ec56e785bf5cb3d0aff75013a05b77ed415cf4e4893beea03f5407d2703297edc7c4cc2bff05f2c2e6b001cc3f2a058217fd259112bfa93ae261debcf7e00c8714238ede83d7ac933011c5985b2fa414e5d35ff9d51a9b</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Welcome to my blog, enter password to read.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
    <tags>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>随手一记</title>
    <link href="/2023/04/15/%E9%9A%8F%E6%89%8B%E4%B8%80%E8%AE%B0/"/>
    <url>/2023/04/15/%E9%9A%8F%E6%89%8B%E4%B8%80%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="3ba9806c390ffb3771f9ae017e090385c29c888791bae860d97368746e3c3d2b">90b802059200f1da98db072b6ecfd07791fb382f17959c11a7aad96ea7c10601184d6a5270a85c7f192158c3a751a4ce1d955c7b1863d48cc2883354ca435fe79a33cf055ca9951b4d98a0e2e8aea1caac478e245002fdf7781da0626155a24a0fe487155720144b23f9755fd58d598b601484d48be3f875dcac16f4d20a27e7a6769fcb509f3987c6ae42b69790e029bcb46a35aa509f9b16ff12f5c11c4d307faac364fcf4c583089f6dad0e2d6f4f</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>阿里笔试</title>
    <link href="/2023/04/12/%E9%98%BF%E9%87%8C%E7%AC%94%E8%AF%95/"/>
    <url>/2023/04/12/%E9%98%BF%E9%87%8C%E7%AC%94%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h2 id="阿里笔试总结"><a href="#阿里笔试总结" class="headerlink" title="阿里笔试总结"></a>阿里笔试总结</h2><h3 id="大致题型"><a href="#大致题型" class="headerlink" title="大致题型"></a>大致题型</h3><p>7道单选</p><p>8道多选</p><p>3道算法题</p><p>共<strong>100</strong>分钟</p><h3 id="考试内容"><a href="#考试内容" class="headerlink" title="考试内容"></a>考试内容</h3><p>选择中包括操作系统、Linux命令、正则表达式、数据库SQL、代码补充等（树和森林、二分查找次数）</p><p>算法题</p><ol><li>给出一棵<strong>好树</strong>，每个节点分为两种颜色，红色和蓝色，好树的定义为红色节点数大于蓝色节点数，若删除一条边，两棵树都是好树，则方案数加一。询问最终有多少个方案</li><li>给出一个数组，长度为$n$($n \in [1,10^5]$)，每次操作可以将一个数的某一个二进制位反转（0变为1，或者1变为0）。求出将整个数组变为相等的数所需要的最小操作数。</li><li>给出一个数x，范围是$x \in [1,10^{100000}]$，你可以删除这个数中任意连续的一段数，若能够使得这个数变成15的倍数，则方案数加一，删除的下标不同，则视为方案不同。举例：12120，你可以有三种方案使得这个数变成120，有一种方案使得这个数变成0，共四种方案。</li></ol><h3 id="结果记录"><a href="#结果记录" class="headerlink" title="结果记录"></a>结果记录</h3><p>选择题知识欠缺严重，Linux命令、正则表达式等需要学习</p><p>算法题写出了前两道，最后一道过了20%。</p><p>第一题</p><p>dfs</p><p>第二题</p><p>统计每个二进制位上$1$的个数，若1的个数大于数的个数的一半，则将这一位统一为1，否则，统一成0即可</p><p>第三题</p><p>将这个数每一位存储到数组中，求其前缀和。一个数是15的倍数要满足两个条件，一个是最后一位是0或者5，另一个是所有位数和为3的倍数。</p>]]></content>
    
    
    
    <tags>
      
      <tag>笔试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>美团二面</title>
    <link href="/2023/04/10/%E7%BE%8E%E5%9B%A2%E4%BA%8C%E9%9D%A2/"/>
    <url>/2023/04/10/%E7%BE%8E%E5%9B%A2%E4%BA%8C%E9%9D%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="问题记录"><a href="#问题记录" class="headerlink" title="问题记录"></a>问题记录</h2><ol><li><p>自我介绍</p></li><li><p>操作系统相关问题</p><ol><li>进程、线程、协程分别是什么？</li><li>上下文切换的区别？</li><li>操作系统内核态和用户态？</li></ol></li><li><p>计网相关</p><ol><li>DNS过程？</li></ol></li><li><p>数据库相关</p><ol><li>B+树</li><li>构建过程？？</li></ol></li><li><p>Java相关</p><ol><li>内存模型</li><li>垃圾回收</li><li>Spring</li><li>SpringMVC分发机制（Dispatch）</li></ol></li><li><p>算法题：数独（9*9）</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一次面试-美团一面记录</title>
    <link href="/2023/04/06/%E7%AC%AC%E4%B8%80%E6%AC%A1%E9%9D%A2%E8%AF%95-%E7%BE%8E%E5%9B%A2%E4%B8%80%E9%9D%A2%E8%AE%B0%E5%BD%95/"/>
    <url>/2023/04/06/%E7%AC%AC%E4%B8%80%E6%AC%A1%E9%9D%A2%E8%AF%95-%E7%BE%8E%E5%9B%A2%E4%B8%80%E9%9D%A2%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h3 id="问题记录"><a href="#问题记录" class="headerlink" title="问题记录"></a>问题记录</h3><ol><li>简单自我介绍</li><li>在学校做过哪些项目，遇到过什么困难，怎么解决的？</li><li>HashMap的底层结构？是否能保证线程安全</li><li>如果要保证线程安全，需要用什么哈希表？结构？</li><li>线程的创建方式？</li><li>如果需要返回值，线程如何创建？</li><li>volatile的作用？能否在<code>i++</code>时使用？</li><li>synchronized的作用？</li><li>假设一个场景，要实现会议室预定的功能，你会怎么做？有哪些JUC的中间件可以直接使用？</li><li>设计模式了解吗？了解哪些？</li><li>简单提了一下消息队列</li><li>数据库的锁有哪些？</li><li>数据库的索引作用及结构？</li><li>B+树的好处？</li><li>B树与B+树的区别？</li><li>数据库的事务？</li><li>为什么一张表不应超过500万行？表如果大于500万行应该如何存储？</li><li>你未来的职业规划是什么样的？</li><li>你什么时候可以来实习？实习多久？</li><li>你有什么需要提问的？</li></ol><h3 id="面试感想"><a href="#面试感想" class="headerlink" title="面试感想"></a>面试感想</h3><p>Java特性部分答得还算流畅，会议室场景部分确实很迷。数据库的部分基本没看，都没怎么答上来……</p><p>总体流程40分钟，没有算法题，面试官基本上不苟言笑，我倒是有点嬉皮笑脸orz</p>]]></content>
    
    
    
    <tags>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JVM Learning</title>
    <link href="/2023/04/01/JVM-Learning/"/>
    <url>/2023/04/01/JVM-Learning/</url>
    
    <content type="html"><![CDATA[<h3 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h3><h4 id="方法区存储内容"><a href="#方法区存储内容" class="headerlink" title="方法区存储内容"></a>方法区存储内容</h4><p>类型信息</p><p>对每个加载的类型（class interface enum annotation），JVM必须存储以下类型信息：</p><ol><li>类型的完整有效名称（包名.类名）</li><li>类型直接父类的完整有效名</li><li>类型的修饰符</li><li>类型直接接口的有序列表</li></ol><p>域信息</p><blockquote><p>也就是类型的成员变量</p></blockquote><ol><li>JVM必须在方法区中保存类型的所有域的相关信息以及域的声明顺序</li><li>域的相关信息包括：域名称、域类型、域修饰符</li></ol><p>方法信息</p><ol><li>方法名称</li><li>方法的返回类型，包括void，void在Java中对应的是void.class</li><li>方法参数的数量和类型（按照顺序）</li><li>方法的修饰符</li><li>方法的字节码、操作数栈、局部变量表及大小</li><li>异常表，异常表记录每个异常处理的开始位置、结束位置、代码处理在程序计数器中的偏移地址、被捕获的异常类的常量池索引</li></ol><h4 id="non-final类型的类变量"><a href="#non-final类型的类变量" class="headerlink" title="non-final类型的类变量"></a>non-final类型的类变量</h4><ol><li>静态变量和类关联在一起，随着类的加载而加载，他们成为类数据在逻辑上的一部分</li><li>类变量被所有类的实例所共享，即使没有实例，也可以访问</li></ol><h4 id="全局常量：static-final"><a href="#全局常量：static-final" class="headerlink" title="全局常量：static final"></a>全局常量：static final</h4><ol><li>全局常量就是使用static final修饰的</li><li>被声明为final的类变量的处理方法不同，每个全局常量在编译的时候就被分配了</li></ol><h3 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h3><ol><li>方法区，内部包含了运行时常量池</li><li>字节码文件，内部包含了常量池</li><li>要弄清楚方法区，就需要理解ClassFile，因为加载类的信息都在方法区。</li><li>要弄清楚方法区的运行时常量池，需要理解清楚ClassFile中的常量池</li></ol><h4 id="常量池"><a href="#常量池" class="headerlink" title="常量池"></a>常量池</h4><p>字节码文件中的常量池中的内容：</p><ol><li>数量值</li><li>字符串值</li><li>类引用</li><li>字段引用</li><li>方法引用</li></ol><p>常量池可以看作一张表，虚拟机指令根据这张表找到要执行的类名方法名、参数类型和字面量</p><h4 id="运行时常量池-1"><a href="#运行时常量池-1" class="headerlink" title="运行时常量池"></a>运行时常量池</h4><ol><li>是方法区的一部分</li><li>常量池表作为字节码文件的一部分，用于存放编译器生成的各种字面量与符号引用，这部分内容将在类加载后存放到方法区的运行时常量池中。</li><li>运行时常量池在加载类和接口到虚拟机后，就会创建对应的运行时常量池。</li><li>JVM为每个已加载的类型都维护一个常量池。池中的数据项像数组一样，是通过索引访问的</li><li>运行时常量池中包含多种不同的常量，包括编译器就已经明确的数值字面量，也包括运行期解析后才能够获得的方法或者字段引用。此时不再是符号地址，而是真实地址。<font color = red>运行时常量池具备动态性</font></li><li>运行时常量池类似于传统变成语言中的符号表，但是它所包含的数据比符号更加丰富</li><li>当创建类或接口的运行时常量池时，如果构造运行时常量池所需的内存空间超过了方法区所能提供的最大值，则抛出OOM</li></ol><h3 id="执行引擎"><a href="#执行引擎" class="headerlink" title="执行引擎"></a>执行引擎</h3><p>虚拟机可以执行哪些不被硬件直接支持的指令集格式。</p><p>JVM将字节码装载到内部，但字节码不能直接运行在操作系统上。</p><p>为了让程序能够运行起来，执行引擎就是将字节码指令解释&#x2F;编译成对应平台上的本地机器指令。</p><p>执行引擎有两种行为：一种是解释执行，另一种是编译执行（后端编译，从Java程序到字节码这个过程是前端编译）</p><p>执行引擎解释器对字节码采用逐行解释的方式执行，将每条字节码文件的内容“翻译”为对应平台的本地机器指令执行；JIT（Just In Time Compiler）编译器，就是虚拟机将源代码一次性编译成和本地机器平台相关的机器语言，但不是马上执行。</p>]]></content>
    
    
    
    <tags>
      
      <tag>JVM</tag>
      
      <tag>计算机学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/04/01/hello-world/"/>
    <url>/2023/04/01/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
